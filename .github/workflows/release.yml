name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: x86_64-pc-windows-msvc
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Update version in Cargo.toml
      run: |
        $version = "${{ github.event.inputs.version }}" -replace '^v', ''
        (Get-Content Cargo.toml) -replace '^version = ".*"', "version = `"$version`"" | Set-Content Cargo.toml
      shell: powershell
      
    - name: Run tests
      run: cargo test --verbose
      
    - name: Build release binary
      run: cargo build --release --target x86_64-pc-windows-msvc
      
    - name: Create release directory
      run: |
        mkdir release
        copy target\x86_64-pc-windows-msvc\release\windows-port-viewer.exe release\
        copy README.md release\
        copy LICENSE release\ 2>$null || echo "No LICENSE file found"
        
    - name: Create version info
      run: |
        echo "Windows Port Viewer ${{ github.event.inputs.version }}" > release\VERSION.txt
        echo "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> release\VERSION.txt
        echo "Commit: ${{ github.sha }}" >> release\VERSION.txt
        echo "Branch: ${{ github.ref_name }}" >> release\VERSION.txt
      shell: powershell
      
    - name: Create release package
      run: |
        Compress-Archive -Path release\* -DestinationPath windows-port-viewer-${{ github.event.inputs.version }}-windows.zip
      shell: powershell
      
    - name: Create Git tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add Cargo.toml
        git commit -m "Release ${{ github.event.inputs.version }}" || echo "No changes to commit"
        git tag ${{ github.event.inputs.version }}
        git push origin ${{ github.event.inputs.version }}
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        files: windows-port-viewer-${{ github.event.inputs.version }}-windows.zip
        name: Windows Port Viewer ${{ github.event.inputs.version }}
        prerelease: ${{ github.event.inputs.prerelease }}
        body: |
          ## Windows Port Viewer ${{ github.event.inputs.version }}
          
          ### Features
          - List TCP and UDP network connections on Windows
          - Display process names for each connection
          - Filter by protocol (TCP/UDP) and port number
          - Clean tabular output format with aligned columns
          - Type-safe enum-based protocol and connection state handling
          - Modular code architecture for maintainability
          - English interface and comprehensive documentation
          
          ### Installation
          1. Download the `windows-port-viewer-${{ github.event.inputs.version }}-windows.zip` file
          2. Extract the contents to a folder of your choice
          3. Run `windows-port-viewer.exe` from command line or PowerShell
          
          ### Usage Examples
          ```bash
          # Show all network connections
          windows-port-viewer.exe
          
          # Show only TCP connections
          windows-port-viewer.exe --protocol tcp
          
          # Show only UDP connections  
          windows-port-viewer.exe --protocol udp
          
          # Filter connections by specific port (local or remote)
          windows-port-viewer.exe --port 443
          
          # Combine filters: TCP connections on port 80
          windows-port-viewer.exe --protocol tcp --port 80
          
          # Show help and all available options
          windows-port-viewer.exe --help
          ```
          
          ### System Requirements
          - Windows 10 or later (x64)
          - Administrator privileges recommended for complete process name resolution
          - No additional dependencies required
          
          ### Technical Details
          - Built with Rust for performance and safety
          - Uses Windows API for native network connection enumeration
          - Type-safe enum system for protocols and connection states
          - Modular architecture with comprehensive unit tests
          
          **Build Information:**
          - Commit: ${{ github.sha }}
          - Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          - Rust Target: x86_64-pc-windows-msvc
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
